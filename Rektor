package main

import (
	"fmt"
	"log"
	"strings"

	"github.com/xuri/excelize/v2"
)

func main() {
	inputPath := "/home/idris/GolandProjects/Raspisanie/123.xlsx"
	outputPath := "/home/idris/GolandProjects/Raspisanie/123_–æ—á–∏—â–µ–Ω–Ω–æ–µ.xlsx"

	f, err := excelize.OpenFile(inputPath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: %v", err)
	}
	defer f.Close()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
	for _, sheet := range f.GetSheetList() {
		fmt.Printf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: %s\n", sheet)

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
		rows, err := f.GetRows(sheet)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ %s: %v", sheet, err)
			continue
		}

		// –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö!)
		var toDelete []int
		for i, row := range rows {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ "(—É—Ä–æ–∫)" –≤ —è—á–µ–π–∫–∞—Ö
			for _, cell := range row {
				if strings.TrimSpace(cell) == "(—É—Ä–æ–∫)" {
					toDelete = append(toDelete, i+1) // Excel: 1-based
					fmt.Printf("‚ùå –°—Ç—Ä–æ–∫–∞ %d –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: %v\n", i+1, row)
					break
				}
			}
		}

		// –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (—á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–±–∏–≤–∞–ª–∏—Å—å)
		for i := len(toDelete) - 1; i >= 0; i-- {
			rowNum := toDelete[i]
			f.RemoveRow(sheet, rowNum)
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º
	if err := f.SaveAs(outputPath); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v", err)
	}

	fmt.Println("üéâ –ì–æ—Ç–æ–≤–æ:", outputPath)
}
